#include <SPI.h>
#include <Pixy.h>
#define CTRL_PIN 3
#define LEFT_M_PLUS 5
#define RIGHT_M_PLUS 6
#define LEFT_M_MINUS 4
#define RIGHT_M_MINUS 7
#define US_TRIGGER_PIN 9// Ultrasonic Pin
#define US_ECHO_PIN 8
#define RIGHT_EYE A5
#define LEFT_EYE A4
#define F_RIGHT_EYE A3
#define F_LEFT_EYE A2

Pixy pixy;
String inputString;
boolean stringComplete = false;
const long Interval = 1000;
boolean obstacle = false;
volatile boolean must_turn = false;
int distance;
boolean Started = false;
const int SPEED = 225;

void setup() {
  Serial.begin(9600);
  Serial.print("+++"); 
  delay(1500); 
  Serial.println("ATID 3209, CH C, CN");
  delay(1100);
  while(Serial.read() != -1) {}; 
  pinMode(CTRL_PIN,OUTPUT);
  pinMode(US_TRIGGER_PIN, OUTPUT);
  pinMode(US_ECHO_PIN, INPUT); 
  pinMode(RIGHT_EYE, INPUT);
  pinMode(LEFT_EYE, INPUT);
  pinMode(LEFT_M_PLUS, OUTPUT);
  pinMode(LEFT_M_MINUS,OUTPUT);
  pinMode(RIGHT_M_PLUS, OUTPUT);
  pinMode(RIGHT_M_MINUS, OUTPUT); 
  pixy.init();
  analogWrite(LEFT_M_MINUS,0);
  analogWrite(RIGHT_M_MINUS,0);

}

void loop() 
{
  
  if (stringComplete)
  {
    buggyControl();
  }
  ultraSonics();
  line();

}



void line() {
  label:

  if (digitalRead(LEFT_EYE) == LOW && digitalRead(RIGHT_EYE) == HIGH)
  {
    analogWrite(LEFT_M_PLUS,55);
    analogWrite(RIGHT_M_PLUS,SPEED - 25);
    goto label;
  }
  else
  if (digitalRead(RIGHT_EYE) == LOW && digitalRead(LEFT_EYE) == HIGH)
  {
    analogWrite(RIGHT_M_PLUS,55);
    analogWrite(LEFT_M_PLUS,SPEED - 25);
    goto label;
  }

  else if (digitalRead(F_RIGHT_EYE) == LOW && digitalRead(F_LEFT_EYE) == HIGH)
  {
    digitalWrite(RIGHT_M_MINUS, HIGH);
    analogWrite(RIGHT_M_PLUS,0);
    delay(25);
    digitalWrite(RIGHT_M_MINUS, LOW);
    analogWrite(LEFT_M_PLUS,SPEED - 40); 
    
  }
  
  else if (digitalRead(F_LEFT_EYE) == LOW && digitalRead(F_RIGHT_EYE) == HIGH)
  {
    digitalWrite(LEFT_M_MINUS, HIGH);
    analogWrite(LEFT_M_PLUS,0);
    delay(25);
    digitalWrite(LEFT_M_MINUS, LOW);
    analogWrite(RIGHT_M_PLUS,SPEED - 40);  
  }
  else 
  { 
      analogWrite(RIGHT_M_PLUS,SPEED);
      analogWrite(LEFT_M_PLUS,SPEED);
  }
}

void Start(){
  delay(20);
  analogWrite(CTRL_PIN, SPEED); // Medium power

}
void Stop(){
  delay(20);
  analogWrite(CTRL_PIN, 0); // All stop

}

void serialEvent() 
{

  while (Serial.available() > 0) // while there are bytes in the buffer;
  {
  
    char inChar = (char)Serial.read();

  
    if (inChar == '\n')// Hitting enter signifies the end of the string, and this tells the controller that a full string has been recieved
    {
      stringComplete = true;// sets the boolean variable to true
    }
    else
    {
      inputString += inChar;  
    }
  }

}

void buggyControl()// This function parses the inputs and decides what action to take
{

    if (inputString == "Start" || inputString == "start")// Allows the function to be called without case sensitivity
    {
      Start();
      delay(10);
      Serial.println("The buggy is Starting");
      inputString = "";
      Started = true;
    }
    else if (inputString == "Stop" || inputString == "stop")
    {
      Stop();
      delay(10);
      Serial.println("The buggy is Stopping");
      Started = false;      
      inputString = "";
  }
}
boolean obstacleDetection()
{
  long duration;

  digitalWrite(US_TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(US_TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(US_TRIGGER_PIN, LOW);

  duration = pulseIn(US_ECHO_PIN, HIGH);
  distance = duration/58;//due to the speed of sound in air, dividing the duration by 58 will result in the distance to the object
  
  if (distance < 10)
  {
    return true;
  }
  else
  {
    return false;
  }
}
void ultraSonics()
{
  unsigned long currentTime = millis();
  unsigned long previousTime;

  if (currentTime - previousTime >= Interval)// if the time between checking is longer than a second 
  {
    previousTime = currentTime;
    
    if (Started)
    {
      if (obstacleDetection()&& !obstacle)
      {
        Stop();
        delay(10);
        Serial.println("The buggy has detected an obstacle");
        obstacle = true;
      }
      if (!obstacleDetection() && obstacle)
      {
        Start();
        delay(10);
        Serial.println("The obstacle has been removed"); 
        obstacle = false;
      }
    }
  }
}
/void IR_ISR()
{
  irInterrupt = true; 
}
void gantryDetection()
{
  if (digitalRead(IR_PIN) != HIGH)
  {
    long irPulse;
    irPulse = pulseIn(IR_PIN, LOW);
    
    if ( irPulse >= 500 && irPulse <= 1500 )
    {
      Serial.println("The Buggy has passed Gantry 1");
    }
    else if ( irPulse >= 1500 && irPulse <= 2500 )
    {
      Serial.println("The Buggy has passed Gantry 2");
    }
    else if ( irPulse >= 2500 && irPulse <= 3500 )
    {
      Serial.println("The Buggy has passed Gantry 3");
    }
    
  }
}

void roadSigns()
{
  static int i = 0;
  uint16_t blocks;
  blocks = pixy.getBlocks();

  if (blocks > 0)

    if (Started)
    {
      //Serial.println(pixy.blocks[i].signature);
      if(pixy.blocks[i].signature == 1)//yellow
      {
        digitalWrite(LEFT_M_PLUS , HIGH );
        Serial.println("The Buggy has come to a fork in the track.");
        delay(1000);
        digitalWrite( LEFT_M_PLUS, LOW);
        delay(1000);
      }
      else if(pixy.blocks[i].signature == 2)//red
      {        
        analogWrite( CTRL_PIN, 120 );
        Serial.println( "The Buggy is slowing down.");
        Serial.println(pixy.blocks[i].signature);
        delay(1000);
      }
      
      else if(pixy.blocks[i].signature == 3)//green
      {
        analogWrite( CTRL_PIN, 165);
        Serial.println("The Buggy has returned to normal speed.");
        delay(1000);
      }
    }

}


